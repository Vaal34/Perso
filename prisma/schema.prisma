generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String      @id @default(cuid())
  email         String?     @unique
  emailVerified DateTime?   @map("email_verified")
  name          String?
  image         String?
  createdAt     DateTime    @default(now())
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]      // Relation avec les tâches
  categories    Category[]  // Relation avec les catégories

  @@map("users")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  importance  String
  isCompleted Boolean    @default(false)
  dueDate     DateTime?
  userId      String     // Clé étrangère vers User
  categoryId  String?    // Clé étrangère vers Category
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("tasks")
}

model Category {
  id        String   @id @default(cuid())
  name      String
  userId    String   // Clé étrangère vers User
  emoji     String
  tasks     Task[]   // Relation avec les tâches
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, userId]) // Permet d'avoir un nom unique par utilisateur
  @@map("categories")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
